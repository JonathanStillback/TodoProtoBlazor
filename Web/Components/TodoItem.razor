@namespace Web.Components

@using Models
@inject IProtoHelper _protoHelper
<ul>
	<li>@Todo.Name</li>
	<li>@Todo.Description</li>
	<li>
		<select value="@((int)Todo.Status)" @onchange="@((Action<ChangeEventArgs>)(e => {OnTodoStatusChanged(e);}))">
			@foreach (int val in Enum.GetValues<Models.TodoStatus>())
			{
				<option value="@val">@((Models.TodoStatus)val)</option>
			}
		</select>
	</li>
</ul>
@code {
	[Parameter]	public Models.Todo Todo {get; set;}
	[Parameter] public EventCallback<Models.Todo> TodoChanged { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}

	private async void OnTodoStatusChanged(ChangeEventArgs e)
	{
		Todo.Status = (Models.TodoStatus)Convert.ToInt32(e.Value);
		Console.WriteLine($"Todo {Todo.Name} updated status to {Todo.Status}");
		var todoProto = await _protoHelper.Request(Todo);
		Console.WriteLine($"Received update of {Todo.Name} from Proto - now called {todoProto.Name}");
		Todo.Name = todoProto.Name;
		TodoChanged.InvokeAsync(Todo);
	}

}